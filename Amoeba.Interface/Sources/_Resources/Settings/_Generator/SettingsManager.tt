<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output encoding="UTF-8" extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#
var namespaces = new List<string>();
var propertyInfos = new List<PropertyInfo>();

using (var stream = new FileStream(this.Host.ResolvePath("Definitions.xml"), FileMode.Open))
using (var reader = new XmlTextReader(stream))
{
    while (reader.Read())
    {
        if (reader.NodeType == XmlNodeType.Element)
        {
            if (reader.LocalName == "Property")
            {
                var type = GetNormalizedTypeName(reader.GetAttribute("Type"));
                var name = reader.GetAttribute("Name");

                propertyInfos.Add(new PropertyInfo(type, name));
            }
            else if (reader.LocalName == "Import")
            {
                namespaces.Add(reader.GetAttribute("Namespace"));
            }

        }
    }
}
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.Serialization;
using Omnius.Configuration;
<#
foreach(var value in namespaces)
{
#>
using <#= value #>;
<#
}
#>

namespace Amoeba.Interface
{
    partial class SettingsManager : ISettings
    {
        private Settings _settings;

        public SettingsManager(string configPath)
        {
            _settings = new Settings(configPath);

            this.Init();
        }

        public void Load()
        {
<#
foreach(var p in propertyInfos)
{
#>
            this.<#= p.Name #> = _settings.Load("<#= p.Name #>", () => this.<#= p.Name #>);
<#
}
#>
        }

        public void Save()
        {
<#
foreach(var p in propertyInfos)
{
#>
            _settings.Save("<#= p.Name #>", this.<#= p.Name #>);
<#
}
#>
        }

<#
    foreach(var p in propertyInfos)
    {
        var generatedFieldName = GetFieldName(p.Name);

#>

        private <#= p.Type #> <#= generatedFieldName #>;

        [DataMember(Name = nameof(<#= p.Name #>))]
        public <#= p.Type #> <#= p.Name #>
        {
            get
            {
                return <#= generatedFieldName #>;
            }
            set
            {
                if (<#= generatedFieldName #> != value)
                {
                    <#= generatedFieldName #> = value;
                    this.OnPropertyChanged(nameof(<#= p.Name #>));
                }
            }
        }
<#
    }
#>
    }
}
<#+
private static string GetNormalizedTypeName(string name)
{
    var sb = new StringBuilder(name);
    sb.Replace("(", "<");
    sb.Replace(")", ">");
    return sb.ToString();
}
private static string GetFieldName(string name)
{
    char[] chars = name.ToCharArray();
    chars[0] = Char.ToLower(chars[0]);
    return "_" + new string(chars);
}
private class PropertyInfo
{
    public PropertyInfo(string type, string name)
    {
        this.Type = type;
        this.Name = name;
    }

    public string Type { get; private set; }
    public string Name { get; private set; }
}
#>
