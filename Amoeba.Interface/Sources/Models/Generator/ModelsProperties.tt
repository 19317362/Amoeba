<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output encoding="UTF-8" extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Collections.ObjectModel;
using Amoeba.Service;
using Amoeba.Core;

namespace Amoeba.Interface
{
<#
var classInfos = new List<ClassInfo>();

using (var stream = new FileStream(this.Host.ResolvePath("Definitions.xml"), FileMode.Open))
using (var reader = new XmlTextReader(stream))
{
    while (reader.Read())
    {
        if (reader.NodeType == XmlNodeType.Element)
        {
            if (reader.LocalName == "Class")
            {
                var className = reader.GetAttribute("Name");
                var propertyInfos = new List<PropertyInfo>();

                using (var reader2 = reader.ReadSubtree())
                {
                    while (reader2.Read())
                    {
                        if (reader2.NodeType == XmlNodeType.Element)
                        {
                            if (reader2.LocalName == "Property")
                            {
                                var type = reader2.GetAttribute("Type");
                                var name = reader2.GetAttribute("Name");
                                var isEditable = bool.Parse(reader2.GetAttribute("IsEditable") ?? "false");
                                var isCollection = bool.Parse(reader2.GetAttribute("IsCollection") ?? "false");

                                propertyInfos.Add(new PropertyInfo(type, name, isEditable, isCollection));
                            }
                        }
                    }
                }

                classInfos.Add(new ClassInfo(className, propertyInfos));
            }
        }
    }
}
#>
<#
foreach(var c in classInfos)
{
#>
    [DataContract(Name = nameof(<#= c.Name #>))]
    partial class <#= c.Name #> : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string name)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
<#
foreach(var p in c.PropertyInfos)
{
    if(!p.IsCollection)
    {
        var generatedFieldName = GetFieldName(p.Name);
#>

        private <#= p.Type #> <#= generatedFieldName #>;

        [DataMember(Name = nameof(<#= p.Name #>))]
        public <#= p.Type #> <#= p.Name #>
        { 
            get
            {
                return <#= generatedFieldName #>;
            }
            <# if(!p.IsEditable) {#>private <#}#>set
            {
                if (value != <#= generatedFieldName #>)
                {
                    <#= generatedFieldName #> = value;
                    this.OnPropertyChanged(nameof(<#= p.Name #>));
                }
            }
        }
<#
    }
    else
    {
        var collectionType = "ObservableCollection<" + p.Type + ">";
        var generatedFieldName = GetFieldName(p.Name);
#>

        private <#= collectionType #> <#= generatedFieldName #>;

        [DataMember(Name = nameof(<#= p.Name #>))]
        public <#= collectionType #> <#= p.Name #>
        { 
            get
            {
                if(<#= generatedFieldName #> == null)
                    <#= generatedFieldName #> = new <#= collectionType #>();

                return <#= generatedFieldName #>;
            }
        }
<#
    }
}
#>
    }
<#
}
#>
}
<#+
private static string GetFieldName(string name)
{
    char[] chars = name.ToCharArray();
    chars[0] = Char.ToLower(chars[0]);
    return "_" + new string(chars);
}
private class ClassInfo
{
    public ClassInfo(string name, IEnumerable<PropertyInfo> propertyInfos)
    {
        this.Name = name;
        this.PropertyInfos = propertyInfos.ToArray();
    }

    public string Name { get; private set; }
    public IEnumerable<PropertyInfo> PropertyInfos { get; private set; }
}
private class PropertyInfo
{
    public PropertyInfo(string type, string name, bool isEditable, bool isCollection)
    {
        this.Type = type;
        this.Name = name;
        this.IsEditable = isEditable;
        this.IsCollection = isCollection;
    }

    public string Type { get; private set; }
    public string Name { get; private set; }
    public bool IsEditable { get; private set; }
    public bool IsCollection { get; private set; }
}
#>
