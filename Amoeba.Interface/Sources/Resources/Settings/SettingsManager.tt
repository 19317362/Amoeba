<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output encoding="UTF-8" extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Omnius.Configuration;

namespace Amoeba.Interface
{
    partial class SettingsManager : ISettings
    {
        private Settings _settings;

        public SettingsManager(string configPath)
        {
            _settings = new Settings(configPath);

            this.Init();
        }
<#
var properties = new List<PropertyInfo>();

using (var stream = new FileStream(this.Host.ResolvePath("Definitions.xml"), FileMode.Open))
using (var reader = new XmlTextReader(stream))
{
    while (reader.Read())
    {
        if (reader.NodeType == XmlNodeType.Element)
        {
            if (reader.LocalName == "Property")
            {
                var type = reader.GetAttribute("Type");
                var name = reader.GetAttribute("Name");
                var isEditable = bool.Parse(reader.GetAttribute("IsEditable") ?? "false");

                properties.Add(new PropertyInfo(type, name, isEditable));
            }
        }
    }
}
#>

        public void Load()
        {
<#
foreach(var p in properties)
{
#>
            this.<#= p.Name #> = _settings.Load("<#= p.Name #>", () => this.<#= p.Name #>);
<#
}
#>
        }

        public void Save()
        {
<#
foreach(var p in properties)
{
#>
            _settings.Save("<#= p.Name #>", this.<#= p.Name #>);
<#
}
#>
        }

<#
foreach(var p in properties)
{
#>
        public <#= p.Type #> <#= p.Name #> { get; <# if(!p.IsEditable) {#>private <#}#>set; }
<#
}
#>
    }
}
<#+
private class PropertyInfo
{
    public PropertyInfo(string type, string name, bool isEditable)
    {
        this.Type = type;
        this.Name = name;
        this.IsEditable = isEditable;
    }

    public string Type { get; private set; }
    public string Name { get; private set; }
    public bool IsEditable { get; private set; }
}
#>
