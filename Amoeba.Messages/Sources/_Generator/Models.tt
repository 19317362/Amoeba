<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output encoding="UTF-8" extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#
var namespaces = new List<string>();
var classInfos = new List<ClassInfo>();

using (var stream = new FileStream(this.Host.ResolvePath("Definitions.xml"), FileMode.Open))
using (var reader = new XmlTextReader(stream))
{
    while (reader.Read())
    {
        if (reader.NodeType == XmlNodeType.Element)
        {
            if (reader.LocalName == "Import")
            {
                namespaces.Add(reader.GetAttribute("Namespace"));
            }
            else if (reader.LocalName == "Class")
            {
                var className = GetNormalizedTypeName(reader.GetAttribute("Name"));
                var propertyInfos = new List<PropertyInfo>();

                using (var reader2 = reader.ReadSubtree())
                {
                    while (reader2.Read())
                    {
                        if (reader2.NodeType == XmlNodeType.Element)
                        {
                            if (reader2.LocalName == "ItemProperty")
                            {
                                var type = GetNormalizedTypeName(reader2.GetAttribute("Type"));
                                var name = reader2.GetAttribute("Name");

                                propertyInfos.Add(new PropertyInfo(PropertyType.Item, type, name));
                            }
                            else if (reader2.LocalName == "CollectionProperty")
                            {
                                var type = GetNormalizedTypeName(reader2.GetAttribute("Type"));
                                var name = reader2.GetAttribute("Name");

                                propertyInfos.Add(new PropertyInfo(PropertyType.Collection, type, name));
                            }
                        }
                    }
                }

                classInfos.Add(new ClassInfo(className, propertyInfos));
            }
        }
    }
}
#>
<# foreach(var value in namespaces) { #>
using <#= value #>;
<# } #>

namespace Amoeba.Messages
{
<# foreach(var classInfo in classInfos) { #>
    [DataContract(Name = nameof(<#= classInfo.Name #>))]
    public sealed class <#= classInfo.Name #>
    {
<# foreach(var p in classInfo.PropertyInfos) { #>
<# if(p.PropertyType == PropertyType.Item) { #>
        private <#= p.Type #> <#= GetFieldName(p.Name) #>;
<# } else if(p.PropertyType == PropertyType.Collection) { #>
        private List<<#= p.Type #>> <#= GetFieldName(p.Name) #>;
<# } #>
<# } #>

        public <#= classInfo.Name #>(<#= GetConstructorArgumentsText(classInfo) #>)
        { 
<# foreach(var p in classInfo.PropertyInfos) { #>
<# if(p.PropertyType == PropertyType.Item) { #>
            this.<#= p.Name #> = <#= GetArgumentName(p.Name) #>;
<# } else if(p.PropertyType == PropertyType.Collection) { #>
            if (<#= GetArgumentName(p.Name) #> != null) this.Protected<#= p.Name #>.AddRange(<#= GetArgumentName(p.Name) #>);
<# } #>
<# } #>
        }
<# foreach(var p in classInfo.PropertyInfos) { #>
<# if(p.PropertyType == PropertyType.Item) { #>

        [DataMember(Name = nameof(<#= p.Name #>))]
        public <#= p.Type #> <#= p.Name #> 
        { 
            get
            {
                return <#= GetFieldName(p.Name) #>;
            }
            private set
            {
                <#= GetFieldName(p.Name) #> = value;
            }
        }
<# } else if(p.PropertyType == PropertyType.Collection) { #>

        private volatile ReadOnlyCollection<<#= p.Type #>> _readOnly<#= p.Name #>;

        public IEnumerable<<#= p.Type #>> <#= p.Name #>
        {
            get
            {
                if (_readOnly<#= p.Name #> == null)
                    _readOnly<#= p.Name #> = new ReadOnlyCollection<<#= p.Type #>>(this.Protected<#= p.Name #>);

                return _readOnly<#= p.Name #>;
            }
        }

        [DataMember(Name = nameof(<#= p.Name #>))]
        private List<<#= p.Type #>> Protected<#= p.Name #>
        {
            get
            {
                if (<#= GetFieldName(p.Name) #> == null)
                    <#= GetFieldName(p.Name) #> = new List<<#= p.Type #>>();

                return <#= GetFieldName(p.Name) #>;
            }
        }
<# } #>
<# } #>
    }

<# } #>
}
<#+
private static string GetNormalizedTypeName(string name)
{
    var sb = new StringBuilder(name);
    sb.Replace("(", "<");
    sb.Replace(")", ">");
    return sb.ToString();
}
private static string GetFieldName(string name)
{
    char[] chars = name.ToCharArray();
    chars[0] = Char.ToLower(chars[0]);
    return "_" + new string(chars);
}
private static string GetArgumentName(string name)
{
    char[] chars = name.ToCharArray();
    chars[0] = Char.ToLower(chars[0]);
    return new string(chars);
}
private static string GetConstructorArgumentsText(ClassInfo classInfo)
{
    var tempList = new List<string>();

    foreach(var p in classInfo.PropertyInfos)
    {
        var generatedArgumentName = GetArgumentName(p.Name);

        if(p.PropertyType == PropertyType.Item)
        {
            tempList.Add(string.Format("{0} {1}", p.Type, generatedArgumentName));
        }
        else if(p.PropertyType == PropertyType.Collection)
        {
            tempList.Add(string.Format("IEnumerable<{0}> {1}", p.Type, generatedArgumentName));
        }
    }

    return string.Join(", ", tempList);
}
private class ClassInfo
{
    public ClassInfo(string name, IEnumerable<PropertyInfo> propertyInfos)
    {
        this.Name = name;
        this.PropertyInfos = propertyInfos.ToArray();
    }

    public string Name { get; private set; }
    public IEnumerable<PropertyInfo> PropertyInfos { get; private set; }
}
private enum PropertyType
{
    Item,
    Collection,
}
private class PropertyInfo
{
    public PropertyInfo(PropertyType propertyType, string type, string name)
    {
        this.PropertyType = propertyType;
        this.Type = type;
        this.Name = name;
    }

    public PropertyType PropertyType { get; private set; }
    public string Type { get; private set; }
    public string Name { get; private set; }
}
#>
